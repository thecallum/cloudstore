# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  windows: circleci/windows@2.2.0
  aws-cli: circleci/aws-cli@2.0

executors:
  docker-dotnet:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:3.1

jobs:
  build-and-test-document-service:
    machine: true # Use a Linux VM instead of docker environment
    steps:
      - checkout
      - run:
          working_directory: ./backend/document-service/DocumentService
          name: build
          command: docker-compose build test
      - run:
          working_directory: ./backend/document-service/DocumentService
          name: Run tests
          command: docker-compose run test
  build-and-test-listener-service:
    machine: true # Use a Linux VM instead of docker environment
    steps:
      - checkout
      - run:
          working_directory: ./backend/DocumentServiceListener/DocumentServiceListener
          name: build
          command: docker-compose build listener-tests
      - run:
          working_directory: ./backend/DocumentServiceListener/DocumentServiceListener
          name: Run tests
          command: docker-compose run listener-tests
  deploy-document-service:
    executor:
      name: windows/default
      shell: powershell.exe
    steps:
      - checkout
      - run:
          name: install-aws-extensions
          command: dotnet tool install -g Amazon.Lambda.Tools
      - run:
          working_directory: ./backend/document-service/DocumentService/DocumentService
          name: publish
          command: dotnet lambda package

      - run: Get-FileHash .\bin\Release\netcoreapp3.1\DocumentService.zip -Algorithm SHA512 | Select-Object -ExpandProperty Hash > lambda_function_payload.zip.base64sha256
      - run: aws s3 cp --content-type text/plain lambda_function_payload.zip.base64sha256 s3://terraform-state-cloudstore/lambda_function_payload.zip.base64sha256

    
      

      - run:
          working_directory: ./backend/document-service/DocumentService/DocumentService
          name: Upload zip to S3
          command: aws s3 cp .\bin\Release\netcoreapp3.1\DocumentService.zip s3://terraform-state-cloudstore/DocumentService/DocumentService.zip

  deploy-listener-service:
    executor: windows/default
    steps:
      - checkout
      - run:
          name: install-aws-extensions
          command: dotnet tool install -g Amazon.Lambda.Tools
      - run:
          working_directory: ./backend/DocumentServiceListener/DocumentServiceListener/DocumentServiceListener
          name: publish
          command: dotnet lambda package
      - run:
          working_directory: ./backend/DocumentServiceListener/DocumentServiceListener/DocumentServiceListener
          name: Upload zip to S3
          command: aws s3 cp .\bin\Release\netcoreapp3.1\DocumentServiceListener.zip s3://terraform-state-cloudstore/DocumentServiceListener/DocumentServiceListener.zip


  terraform-apply:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      # -*attach_workspace 
      - checkout
      - run:
          working_directory: ./terraform
          name: terraform init & plan
          command: |
            terraform get -update=true
            terraform init
      - run:
          working_directory: ./terraform
          name: terraform
          command: |
            terraform apply -auto-approve -var="DatabaseConnectionString=${DatabaseConnectionString}" -var="SECRET=${SECRET}"

  deploy-frontend:
    docker:
      - image: circleci/node:10.16.3
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: install-yarn
          command: 'sudo npm install --global yarn'
      - run:
          working_directory: ./frontend
          name: init-yarn
          command: yarn install --production=true
      - run:
          working_directory: ./frontend
          name: build
          command: CI=false yarn build
      - run:
          working_directory: ./frontend/build
          name: deploy
          command: aws s3 sync . s3://cloudstore.thecallum.com
      - run:
          # working_directory: ./backend/document-service/DocumentService
          name: invalidate-cloudfront
          command: aws cloudfront create-invalidation --distribution-id E23ZX2UPNCXM1D --paths "/*"

workflows:
  test-and-deploy:
    jobs:
      - build-and-test-document-service
      - build-and-test-listener-service
      - deploy-document-service:
          requires:
            - build-and-test-document-service
          filters:
            branches:
              only:
                - main
                - terraform-2
      - deploy-listener-service:
          requires:
            - build-and-test-listener-service
          filters:
            branches:
              only:
                - main
                - terraform-2
      - deploy-frontend:
          requires:
            - deploy-document-service
            - deploy-listener-service
          filters:
            branches:
              only:
                - main
                - terraform-2
      - terraform-apply:
          requires:
            - deploy-document-service
            - deploy-listener-service
          filters:
            branches:
              only:
                - main
                - terraform-2


